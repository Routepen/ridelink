<script type="text/javascript">

  var routeData = <%- routeDataString %>;

  function setUpTable() {
    var tbody = document.getElementById("riderTable");
    tbody.innerHTML = "";
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      tbody.innerHTML += "<tr>" +
          "<td> " + (i+1) + " </td>" +
          "<td> " + routeData.confirmedRiders[i].facebook.name + "</td>" +
          "<td> $I.dk </td>" +
          '<td> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></td>' +
          "</tr>";
    }


    for (var i = 0; i < routeData.riders.length; i++) {
      var onclick = "javascript:confirmRider('" + routeData.riders[i]._id + "')";

      tbody.innerHTML += '<tr>' +
          '<td>' + (i+1) + '</td>' +
          '<td>' + routeData.riders[i].facebook.name + '</td>' +
          '<td> $I.dk </td>' +
          '<td>' +
          '  <button onclick="' + onclick + '" type="button" class="btn btn-success btn-xs">Confirm</button>' +
          '</td>' +
        '</tr>';
    }
  }

  setUpTable();

  var mapHandler;

  function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: 34.4140, lng: -119.8489},
          zoom: 13
      });

      mapHandler = new showRoute(map);
  }


  var markers = {};

  function showRoute(map) {
    this.map = map;
    this.originPlaceId = null;
    this.destinationPlaceId = null;
    this.travelMode = 'DRIVING';
    this.directionsService = new google.maps.DirectionsService;
    this.directionsDisplay = new google.maps.DirectionsRenderer;
    this.directionsDisplay.setMap(map);
    this.geocoder = new google.maps.Geocoder();

    var me = this;
    this.drawMap(function() {
      me.setUpDropOff(map);
      me.dropInitialPins(map);
    });

  }

  showRoute.prototype.drawMap = function(callback) {
    var waypoints = [];
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      waypoints.push({
        location: routeData.dropOffs[routeData.confirmedRiders[i]._id],
        stopover: true,
      });
    }

    console.log(waypoints);

    me = this;

    this.directionsService.route({
      origin: routeData.origin,
      destination:  routeData.destination,
      travelMode: this.travelMode,
      waypoints: waypoints,
      optimizeWaypoints: true
    }, function(response, status) {
      if (status === 'OK') {
        console.log(response.routes[0].warnings);
        me.directionsDisplay.setDirections(response);
        if (callback) callback();
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }

  showRoute.prototype.dropInitialPins = function(map) {

    var contentString;
    var me = this;

    for (var i = 0; i < routeData.riders.length; i++) {
      var rider = routeData.riders[i];
      this.geocoder.geocode( { 'address': routeData.dropOffs[rider._id] }, function(results, status) {
        contentString = "<div>" + rider.facebook.name + "</div>";

        <% if (user && routeData.driver._id.toString() == user._id.toString()) { %>

          contentString += '<button onclick="javascript:me.confirmRider(\'' + rider._id + '\')">Confirm</button>'
        <% } %>


        var infowindow = new google.maps.InfoWindow({
          content: contentString
        });

        var riderId = rider._id;

        markers[riderId] = markers[riderId] || new google.maps.Marker({
          map: map,
          draggable: true,
          position: results[0].geometry.location,
          title: rider.facebook.name
        });

        markers[riderId].addListener('click', function() {
          infowindow.open(map, markers[riderId]);
        });

      });
    }
  }

  showRoute.prototype.setUpDropOff = function(map) {
    this.dropOffInput = document.getElementById("pac-input");
    var dropOffAutocomplete = new google.maps.places.Autocomplete(
            this.dropOffInput, {placeIdOnly: true});

    this.setupPlaceChangedListener(dropOffAutocomplete)
  }

  showRoute.prototype.setupPlaceChangedListener = function(autocomplete) {
    var map = this.map;
    var geocoder = this.geocoder;
    var me = this;

    autocomplete.bindTo('bounds', this.map);
    autocomplete.addListener('place_changed', function() {
      <% if (user) { %>
          var place = autocomplete.getPlace();
          if (!place.place_id) {
              window.alert("Please select an option from the dropdown list.");
              return;
          }
          geocoder.geocode( { 'address': place.name }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
              markers["<%= user._id %>"] = markers["<%= user._id %>"] || new google.maps.Marker({
                  map: map,
                  draggable: true,
                  position: results[0].geometry.location
              });

              markers["<%= user._id %>"].setPosition(results[0].geometry.location);

            } else {
              alert("Couln't map to " + place.name + " because " + status);
            }
          });
        <% } else { %>
          alert("please log in first");
        <% } %>
      });
  };

  function confirmRider(id) {
    console.log(id);

    var post = {
      userId: id,
      routeId: routeData._id
    };

    $.post("/route/confirmrider", post, function(data, textStatus) {
      for (var i = 0; i < routeData.riders.length; i++) {
        var rider = routeData.riders[i];
        if (rider._id == id) {
          routeData.riders.splice(i, 1);
          routeData.confirmedRiders.push(rider);
        }
      }
      setUpTable();
      mapHandler.drawMap();
    });
  }

</script>
