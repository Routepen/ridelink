<script type="text/javascript">

  var mapHandler;

  function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: 34.4140, lng: -119.8489},
          zoom: 13
      });

      mapHandler = new showRoute(map);
  }


  var markers = {}, infoWindows = {};

  function showRoute(map) {
    this.map = map;
    this.originPlaceId = null;
    this.destinationPlaceId = null;
    this.travelMode = 'DRIVING';
    this.directionsService = new google.maps.DirectionsService;
    this.directionsDisplay = new google.maps.DirectionsRenderer;
    this.directionsDisplay.setMap(map);
    this.geocoder = new google.maps.Geocoder();

    var me = this;
    this.drawMap(function() {
      me.setUpDropOff(map);
      me.setMarkers();
    });

  }

  showRoute.prototype.drawMap = function(callback) {
    var waypoints = [];
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      waypoints.push({
        location: routeData.dropOffs[routeData.confirmedRiders[i]._id],
        stopover: true,
      });
    }

    for (key in stopLocations) {
      waypoints.push({
        location: stopLocations[key].find('span').html(),
        stopover: true
      });
    }

    me = this;

    this.directionsService.route({
      origin: routeData.origin,
      destination:  routeData.destination,
      travelMode: this.travelMode,
      waypoints: waypoints,
      optimizeWaypoints: true
    }, function(response, status) {
      if (status === 'OK') {
        me.directionsDisplay.setDirections(response);
        if (callback) callback();
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }

  showRoute.prototype.setMarkers = function(map) {
    var map = this.map;
    var contentString;
    var me = this;

    var allRiders = [];
    for (var i = 0; i < routeData.riders.length; i++) {
      var rider = routeData.riders[i];
      rider.confirmed = false;
      allRiders.push(rider);
    }
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      var rider = routeData.confirmedRiders[i];
      rider.confirmed = true;
      allRiders.push(rider);
    }

    var me = this;
    allRiders.forEach(function(rider) {
      me.geocoder.geocode( { 'address': routeData.dropOffs[rider._id] }, function(results, status) {
        contentString = '<div><a href="' + rider.facebook.link + '">' + rider.facebook.name + '</a></div>';

        <% if (isDriver && view != "rider") { %>
          if (!rider.confirmed && routeData.confirmedRiders.length < routeData.seats) {
            contentString += '<button class="btn btn-success btn-xs" onclick="javascript:confirmRider(\'' + rider._id + '\', this)">Confirm</button>'
          }
        <% } %>


        var infowindow = new google.maps.InfoWindow({
          content: contentString
        });

        var riderId = rider._id;

        var markerExists = markers[riderId] != undefined;

        if (!markers[riderId]) {
          markers[riderId] = new google.maps.Marker({
            map: map,
            position: results[0].geometry.location,
            title: rider.facebook.name
          });
        }

        markers[riderId].setPosition(results[0].geometry.location);

        if (!markerExists) {
          infoWindows[riderId] = infowindow;
          markers[riderId].addListener('click', function() {
            hightlightInTable(rider._id);
            infowindow.open(map, markers[riderId]);
          });
        }
        else {
          infoWindows[riderId].setContent(contentString);
        }

        google.maps.event.addListener(infowindow, 'closeclick', unHighlightTable);

        <% if (action == "confirm") { %>
          if ("<%= riderId %>" == riderId) {
            hightlightInTable(rider._id);
            infoWindows[riderId].open(map, markers[riderId]);
          }
        <% } %>

      });
    });
  }

  var dropOffAutocomplete;
  showRoute.prototype.rideRequested = function() {
    <% if (user) { %>
      console.log("a", dropOffAutocomplete);
      var place = dropOffAutocomplete.getPlace();

      if (place && place.place_id) {
        address == place.name;
      }
      else {
        address = $('#pac-input').val();
      }

      if (address == "") {
          window.alert("Please select an option from the dropdown list.");
          return;
      }

      if (me.testMarker) {
        me.testMarker.setMap(null);
        me.testInfoWindow.close();
      }

      var onclick = "riderLocationChanged(); setUpTable()";

      contentString = '<button class="btn btn-success btn-xs" onclick="' + onclick + '">Requst Ride</button>'


      me.testInfoWindow = new google.maps.InfoWindow({
        content: contentString
      });

      me.geocoder.geocode( { 'address': address }, function(results, status) {
        if (results.length == 0) {
          window.alert("Please use autocomplete when choosing a location.");
          return;
        }
        me.testMarker = new google.maps.Marker({
          map: me.map,
          position: results[0].geometry.location
        });
        me.testInfoWindow.open(me.map, me.testMarker);
      });

    <% } else { %>
      window.location.replace("/auth/facebook?redirect=" + encodeURIComponent(window.location.href));
    <% } %>
  }

  showRoute.prototype.setUpDropOff = function(map) {
    dropOffInput = document.getElementById("pac-input");
    if (dropOffInput) {
      dropOffAutocomplete = new google.maps.places.Autocomplete(dropOffInput, {placeIdOnly: true});
      console.log("Autocomplete", dropOffAutocomplete);

      this.setupPlaceChangedListener(dropOffAutocomplete, this.rideRequested);
    }

    pickUpInput = document.getElementById("editOriginInput");
    if (pickUpInput) {
      this.pickUpAutocomplete = new google.maps.places.Autocomplete(
              pickUpInput, {placeIdOnly: true});
      var me = this;
      this.setupPlaceChangedListener(this.pickUpAutocomplete, function() {
        me.changeRoute('origin');
      });
    }


    destinationInput = document.getElementById("editDestinationInput");
    if (destinationInput) {
      this.destinationAutocomplete = new google.maps.places.Autocomplete(
              destinationInput, {placeIdOnly: true});
      var me = this;
      this.setupPlaceChangedListener(this.destinationAutocomplete, function() {
        me.changeRoute('destination');
      });
    }

    var geocoder = this.geocoder;
    var me = this;
  }

  showRoute.prototype.changeRoute = function(location) {
    var autocomplete;
    if (location == "origin") { autocomplete = this.pickUpAutocomplete; }
    else { autocomplete = this.destinationAutocomplete}

    var place = autocomplete.getPlace();
    if (!place || !place.place_id) {
        window.alert("Please select an option from the dropdown list.");
        callback = callback || function() {};
        return callback(new Error("invalid place"));
    }

    routeData[location] = place.name;

    this.drawMap(function() {
      restoreMapText(location);
    });

  }

  showRoute.prototype.setupPlaceChangedListener = function(autocomplete, onChanged) {

    autocomplete.bindTo('bounds', this.map);
    autocomplete.addListener('place_changed', onChanged);

  };


  function confirmRider(id, btn) {
    var post = {
      userId: id,
      routeId: routeData._id
    };

    $(btn).button('loading');

    $.post("/route/confirmrider", post, function(data, textStatus) {
      var addedRider;
      for (var i = 0; i < routeData.riders.length; i++) {
        var rider = routeData.riders[i];
        if (rider._id == id) {
          addedRider = rider;
          routeData.riders.splice(i, 1);
          routeData.confirmedRiders.push(rider);
        }
      }
      $("#seatsText>span").html(routeData.seats - routeData.confirmedRiders.length);
      setUpTable();
      checkSeatsLeft();
      mapHandler.drawMap(function() {
        mapHandler.setMarkers();
      });
      $(btn).button('reset');
      if (addedRider) {
        if (addedRider.facebook.gender.toLowerCase() == "male") {
          $('#riderPronounHeShe').html('he');
          $('#riderPronounHisHer').html('his');
          $('#riderPronounHimHer').html('him');
        }
        else {
          $('#riderPronounHeShe').html('she');
          $('#riderPronounHisHer').html('her');
          $('#riderPronounHimHer').html('her');
        }
        $('#addedRider').html(addedRider.facebook.name.split(' ')[0]);
        $('#tellDriverToWait').modal('show');
      }
    });
  }

  function markPaid(id, btn) {
    var post = {
      userId: id,
      routeId: routeData._id
    };

    $(btn).button('loading');

    $.post("/route/markpaid", post, function(data, textStatus) {
      $(btn).button('reset');
      routeData.riderStatus = routeData.riderStatus || {};
      routeData.riderStatus[id] = routeData.riderStatus[id] || {};
      routeData.riderStatus[id].paid = true;
      setUpTable();
    });
  }

  function removeRider(id, btn) {
    var post = {
      userId: id,
      routeId: routeData._id
    };

    $(btn).button('loading');

    $.post("/route/removerider", post, function(data, textStatus) {
      for (var i = 0; i < routeData.confirmedRiders.length; i++) {
        var rider = routeData.confirmedRiders[i];
        if (rider._id == id) {
          routeData.riders.push(rider);
          routeData.confirmedRiders.splice(i, 1);
        }
      }
      $("#seatsText>span").html(routeData.seats - routeData.confirmedRiders.length);
      setUpTable();
      checkSeatsLeft();
      mapHandler.drawMap(function() {
        mapHandler.setMarkers();
      });
      $(btn).button('reset');
    });
  }

  function cancelRequest(btn) {
    var userId = "<%= userId %>";
    $(btn).button("loading");

    var post = {
      userId: userId,
      routeId: routeData._id
    };

    $.post("/route/cancelrequest", post, function(data, textStatus) {
      var riderDeleted;
      for (var i = 0; i < routeData.riders.length; i++) {
        var rider = routeData.riders[i];
        if (rider._id == userId) {
          riderDeleted = rider;
          routeData.riders.splice(i, 1);
        }
      }
      setUpTable();
      if (riderDeleted && markers[riderDeleted._id]) {
        markers[riderDeleted._id].setMap(null);
        delete markers[riderDeleted._id];
      }
      if (riderDeleted && infoWindows[riderDeleted._id]) { delete infoWindows[riderDeleted._id]; }

      mapHandler.drawMap(function() {
        mapHandler.setMarkers();
      });


      $(btn).css('visibility', 'hidden');
      $(btn).button('reset');

      var textDiv = $('#dropOffText');
      var editableDiv = $('#dropOffTextEditable');
      var span = textDiv.find('span');
      var input = editableDiv.find('input');
      var newValue = "";
      span.html(newValue);
      textDiv.hide();
      editableDiv.show();
    });

  }

  function checkSeatsLeft() {
    var seatsLeft = routeData.seats - routeData.confirmedRiders.length;
    if (seatsLeft <= 0) {
      $("#rideIsFull").show();
    }
    else {
      $("#rideIsFull").hide();
    }
  }

  showRoute.prototype.userClicked = function(riderId) {
    var marker = markers[riderId];
    this.map.setCenter(marker.getPosition());
    infoWindows[riderId].open(this.map, marker);
  }

  function addOrUpdateRider(btn) {
    $(btn).button('loading');
    $('#cancelRequestButton').show();

    var user = <%- user ? JSON.stringify(user) : '{}'%>
    var userId = user._id;

    var text = $('#dropOffText'), editable = $('#dropOffTextEditable');
    text.show();
    editable.hide();
    var address = editable.find('input').val();
    text.find('span').html(address);


    data = {
      routeId: "<%= routeData._id %>",
      address: address
    };

    $.post("/route/addrider", data, function(data, text) {
      var found = false;
      for (var i = 0; i < routeData.riders.length; i++) {
        if (routeData.riders[i]._id == userId) {
          found = true;
          break;
        }
      }
      if (found) {
        routeData.dropOffs[userId] = address;
      }
      else {
        routeData.riders.push(user);
        routeData.dropOffs = routeData.dropOffs || {};
        routeData.dropOffs[userId] = address;
      }

      mapHandler.setMarkers();
      setUpTable();
      $('#numConfirmedRiders').html(routeData.confirmedRiders.length);

      $(btn).button('reset');
      $('#confirmAddRider').modal('hide');
    });
  }

  function riderLocationChanged() {
    var userId = "<%- ( user ? user : {_id:''} )._id %>";
    if (userId == routeData.driver._id) {
      alert("You can't sign up for your own ride");
      return;
    }

    var editable = $('#dropOffTextEditable');
    var address = editable.find('input').val();

    $('#riderDropOff').html(address);
    $('#confirmAddRider').modal('show');
  }

  function setUpEditability() {
    <% if (isDriver  && view != "rider") { %>
      $('#originText>span').click(function() {
        $('#originText').hide();
        $('#originTextEditable').show();
        var input = $('#originTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $('#destinationText>span').click(function() {
        $('#destinationText').hide();
        $('#destinationTextEditable').show();
        var input = $('#destinationTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $('#seatsText>span').click(function() {
        $('#seatsText').hide();
        $('#seatsTextEditable').show();
        var input = $('#seatsTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $('#dateText>span').click(function() {
        $('#dateText').hide();
        $('#dateTextEditable').show();
        var input = $('#dateTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $(function () {
          $("#editDateInput").datepicker();
      });

      $("#editTimeInput").timepicker({
          template: false,
          showInputs: false,
          minuteStep: 5,
      });

      $('#timeText>span').click(function() {
        $('#timeText').hide();
        $('#timeTextEditable').show();
        var input = $('#timeTextEditable').find('input');
        input.focus();
      });
    <% } else { %>

      <% if (isRider) { %>
        $("#dropOffText").show();
      <% } else { %>
        $("#dropOffTextEditable").show();
      <% } %>

    <% } %>

    <% if (!confirmedRider) { %>
      $('#dropOffText').click(function() {
        $('#dropOffText').hide();
        $('#dropOffTextEditable').show();
        var input = $('#dropOffTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });
    <% } %>
  }

  function errorMessageFromEditable(id, newValue){
    if (id == "seats" && newValue != "" + parseInt(newValue)) { return "Please enter a number for the number of people you can take"; }
    if (id == "date" && newValue.split('/').length != 3) { return "Please enter a valid date"; }
    if (id == "time" && newValue == "") { return "Please enter the time you are leaving"; }

    return "";
  }

  function restoreMapText(id) {
    selector = "#" + id;
    var textDiv = $(selector + 'Text');
    var editableDiv = $(selector + 'TextEditable');
    var span = textDiv.find('span');
    var input = editableDiv.find('input');
    var newValue = input.val().trim();
    span.html(newValue);
    textDiv.show();
    editableDiv.hide();

    data = {
      routeId: routeData._id,
      updating: id
    };
    data[id] = newValue;

    $.post("/route/update", data, function() {

    });
  }

  function mapEditableDone(submit, id) {
    if (submit) {
      mapHandler.changeRoute(id);
    }
    else {
      var selector = "#" + id;
      var textDiv = $(selector + 'Text');
      var editableDiv = $(selector + 'TextEditable');
      var span = textDiv.find('span');
      var input = editableDiv.find('input');

      if (id == "dropOff") {
        <% if (isRider) { %>
          input.val(span.html().trim());
          textDiv.show();
          editableDiv.hide();
        <% } else { %>
          input.val("");
        <% } %>
      }
      else {
        input.val(span.html().trim());
        textDiv.show();
        editableDiv.hide();
      }
    }
  }

  function editableDone(submit, id) {
    selector = "#" + id;
    var textDiv = $(selector + 'Text');
    var editableDiv = $(selector + 'TextEditable');
    var span = textDiv.find('span');
    var input = editableDiv.find('input');
    var newValue = input.val().trim();

    var error = errorMessageFromEditable(id, newValue);

    if (error == "" || !submit) {
      if (submit) {
        var toSet = newValue;
        if (id == "seats") {
          toSet -= routeData.confirmedRiders.length;
          if (toSet < 0) {
            $("#lessThanZeroSeats").modal('show');
            input.val(routeData.confirmedRiders.length);
            toSet = 0;
            newValue = routeData.confirmedRiders.length;
          }
          if (toSet == 0) {
            $('#rideIsFull').show();
          }
          else {
            $('#rideIsFull').hide();
          }
        }
        if (id == "time") {
          // var parts = toSet.split(":");
          // var s = parseInt(parts[0]);
          // if (!isNaN(s)) {
          //   if (s == 0) {
          //     t =  "12:" + parts[1] + " AM";
          //   }
          //   else if (s < 12) { toSet += " AM"; }
          //   else if (s == 12) { toSet += " PM"; }
          //   else {
          //     if (parts.length > 1) {
          //         toSet = (s-12) + ":" + parts[1] + " PM";
          //     }
          //   }
          // }
        }

        span.html(toSet);
        textDiv.show();
        editableDiv.hide();

        data = {
          routeId: routeData._id,
          updating: id
        };
        data[id] = newValue;

        $.post("/route/update", data, function() {
          routeData[id] = newValue;
          setUpTable();
          mapHandler.setMarkers();
        });
      }
      else {
        var html = span.html().trim();
        input.val(html);
        textDiv.show();
        editableDiv.hide();
      }
      $('#alertbox').hide();
    }
    else {
      $('#errorMessage').html(error);
      $('#alertbox').show();
    }
  }

  var routeData = <%- JSON.stringify(routeData) %>;
  var user = <%- JSON.stringify(user || '') %>

  function getTdElement(rider, status) {

    var clickable = false;

    var innerButton = "", button2 = "";
    var cancelButton =
      '<button type="button" class="btn btn-default btn-xs editable-cancel" style="margin-left: 10px" onclick="restoreTdElement(\'' + rider._id + '\')">' +
        'Cancel' +
      '</button>';

    if ((status == "Awaiting payment" && routeData.requireInitialDeposit) || (status == "Confirmed" && !routeData.requireInitialDeposit)) {
      clickable = true;
      innerButton =
      '<button type="button" class="btn btn-primary btn-xs editable-submit" onclick="removeRider(\'' + rider._id + '\', this)">' +
        'Remove Rider' +
      '</button>';
    }
    if (status == "Ride Requested") {
      clickable = true;
      innerButton =
      '<button class="btn btn-success btn-xs" onclick="javascript:confirmRider(\'' + rider._id + '\', this)">Confirm</button>'
    }

    var spanClass = "<%= isDriver  && view != "rider" ? "editableInput" : "" %>";
    if (!clickable) { spanClass = ""; }

    if (!routeData.requireInitialDeposit && status == "Awaiting payment") {
      button2 =
      '<button class="btn btn-success btn-xs" style="margin-right: 10px;" onclick="javascript:markPaid(\'' + rider._id + '\', this)">Rider Paid</button>'
    }

    return '<div class="form-inline editableform">' +
      '<div id="tr' + rider._id + 'TextEditable" style="display:none">' +
        button2 +
        innerButton +
        cancelButton +
      '</div>' +

      '<div id="tr' + rider._id + 'Text" style="">' +
        '<span class=' + spanClass + ' aria-hidden="true">' + status + '</span>' +
      '</div>' +
    '</div>';
  }

  function initializeTdElement(rider, status) {
    var divId = 'tr' + rider._id + 'Text';
    var editableId = divId + 'Editable';
    console.log("initing", document.getElementById(divId));
    console.log($('#' + divId + '>span'));
    $('#' + divId + '>span').click(function() {
      console.log('clicked');
      $('#' + divId).hide();
      $('#' + editableId).show();
    });
  }

  function restoreTdElement(riderId, status) {
    var divId = 'tr' + riderId + 'Text';
    var editableId = divId + 'Editable';
    $('#' + divId).show();
    $('#' + editableId).hide();
  }



  function setUpTable() {
    console.log("setting up table");
    var table = document.getElementById("tableDiv");
    if (routeData.confirmedRiders.length + routeData.riders.length == 0) {
      //$(table).hide();
      $('#tableMessage').html("No riders have signed up yet");
      $('#tableMessage').show();
    }
    else {
      //$(table).show();
      $('#tableMessage').html("");
      $('#tableMessage').hide();
    }

    var tbody = document.getElementById("riderTable");
    tbody.innerHTML = "";

    routeData.confirmedRiders.forEach(function(rider, i) {
      var rider = routeData.confirmedRiders[i];
      var color = "green", title="confirmed";
      var status = "";

      if (routeData.riderStatus[rider._id].paid) {
        status="Paid";
      }
      else {
        if (routeData.requireInitialDeposit) {
          status="Awaiting payment";
        }
        else {
          status = "Confirmed";
        }
      }

      tbody.innerHTML += '<tr class="riderElement" id="rider' + rider._id + '">' +
          "<td> " + (i+1) + " </td>" +
          "<td><a href='#' onclick='javascript:mapHandler.userClicked(\"" + rider._id + "\"); return false;'>" + rider.facebook.name + "</a></td>" +
          '<td> ' + getTdElement(rider, status) + '</td>' +
          "</tr>";
    });

    routeData.confirmedRiders.forEach(function(rider) {
      <% if (isDriver && view != "rider") { %>
        if (status != "Paid") {
          initializeTdElement(rider, status);
        }
      <% } %>
    });


    var waitlisted = routeData.confirmedRiders.length >= routeData.seats;
    if (waitlisted && routeData.riders.length > 0) {
      tbody = document.getElementById("waitlistRiderTable");
      tbody.innerHTML = "";
      $('#waitListTable').show();
    }
    else {
      $('#waitListTable').hide();
    }

    routeData.riders.forEach(function(rider, i) {
      var status = "Ride Requested"

      tbody.innerHTML += '<tr class="riderElement" id="rider' + routeData.riders[i]._id + '">' +
          '<td>' + (i+1) + '</td>' +
          "<td><a href='#' onclick='javascript:mapHandler.userClicked(\"" + rider._id + "\"); return false;'>" + rider.facebook.name + "</a></td>" +
          '<td>' +
            getTdElement(rider, status) +
          '</td>' +
        '</tr>';
    });

    <% if (isDriver && view != "rider") { %>
      routeData.riders.forEach(function(rider) {
        if (routeData.confirmedRiders.length < routeData.seats) { initializeTdElement(rider, status); }
      });
    <% } %>
  }

  function hightlightInTable(riderId) {
    $("#riderTable").find("tr").each(function(i, elem) {
      if (elem.id == "rider" + riderId) {
        $(elem).addClass("highlighted");
      }
      else {
        $(elem).removeClass("highlighted");
      }
    });
  }

  function unHighlightTable() {
    $("#riderTable").find("tr").each(function(i, elem) {
      $(elem).removeClass("highlighted");
    });
  }

  function showFBModal() {
    $('#selfLink').html(window.location.hostname + "/route?id=<%= routeData.shortId || routeData._id %>");
    $('#selfLink')[0].href =  "/route?id=<%= routeData.shortId || routeData._id %>&view=rider";
    $("#facebookModal").modal('toggle');
    $('#facebookModal').on('hidden.bs.modal', showAvaliableModals);

    function test() {
      var node = document.getElementById("contentEditableMessageDiv");
      node.focus();
      var textNode = node.firstChild;
      var caret = 10;
      var range = document.createRange();
      range.setStart(textNode, caret);
      range.setEnd(textNode, caret);
      var sel = window.getSelection();
      sel.removeAllRanges();
      sel.addRange(range);
    }

    setTimeout(test, 500);


  }

  function showPaymentConfirmed() {
    $("#paymentConfirmed").modal('show');
    window.history.pushState('RoutePen', 'RoutePen', '/route?id=<%= routeData.shortId || routeData._id %>');
    $('#paymentConfirmed').on('hidden.bs.modal', showAvaliableModals);
  }

  function showsetUpPaymentModal() {
    $("#setUpPaymentModal").modal('toggle');
    $('#setUpPaymentModal').on('hidden.bs.modal', showAvaliableModals);
  };

  function showPaymentModal() {
    $("#paymentModal").modal('toggle');
  }
  <% if (action == "pay" && isRider) { %>
    setTimeout(showPaymentModal, 300);
  <% } %>

  var shareableLinkStatus = 0;
  function toggleShareableLink() {
    $('#shareableLink>input').val(window.location.hostname + "/route?id=<%= routeData.shortId || routeData._id %>");
    if (shareableLinkStatus == 0) {
        $('#shareableLink').show();
        $('#getLinkText').html("Hide link");
        shareableLinkStatus = 1;
    }
    else {
      $('#shareableLink').hide();
      $('#getLinkText').html("Copy link");
      shareableLinkStatus = 0;
    }
  }


  function setUpTextInfo() {
    if (routeData.requireInitialDeposit) {
      $('#infoText').html("Initial Deposit is Required");
    }
  }

  function submitPayment() {
    $.post('/route/riderpaid', {routeId: "<%= routeId %>"}, function(error, message) {

    });
  }

  function msToTime(ms) {
    s = 1000;
    m = s * 60;
    h = m*60;

    var sc, mc, hc;
    sc = mc = hc = 0;

    while (ms >= h) {
      hc++;
      ms -= h;
    }

    while (ms >= m) {
      mc++;
      ms -= m;
    }

    while (ms >= s) {
      sc++;
      ms -= s;
    }

    if (mc < 10) {
      mc = "0" + mc;
    }
    if (sc < 10) {
      sc = "0" + sc;
    }

    return hc + ":" + mc + ":" + sc;
  }

  function updateClock() {
    <% if (confirmedRider) { %>
      var d = new Date(routeData.riderStatus["<%= user._id %>"].confirmedOn);
      d.setDate(d.getDate() + 1);
      d.setHours(d.getHours() - 6);
      var ms = d - Date.now();

      $("#countDown").html(msToTime(ms));
      setTimeout(updateClock, 1000);
    <% } %>
  }

  var stopLocations = {};
  var count = 0;
  function setUpStops() {
    var stops = routeData.stops;
    var stopsDiv = $('#stops');
    count = stops.length;

    for (var i = 0; i < count; i++) {
      var div = $('<div></div>');
      var onclick = "removeStop(" + i + ")";

      <% if (isDriver && view != "rider") { %>
        var cancel = '<i class="material-icons clickable" style="padding-right:10px; font-size:18px" onclick="' + onclick + '">remove_circle</i>';
        var stop = $('<span style="font-size:18px" class="">' + stops[i] + '</span>');
      <% } else {%>
        var cancel = '';
        var stop = $('<span style="margin-left: 22px; font-size:18px">' + stops[i] + '</span>');
      <% } %>

      stopLocations[i] = div;

      div.attr('id', 'stop' + i);

      div.append(cancel);
      div.append(stop);

      stopsDiv.append(div);
    }
  }

  function addStop() {
    var stops = $('#stops');
    var id = "stop" + count;
    console.log("id", id);
    var onclick = "removeStop(" + count + ")";

    var div = $('<div></div>');
    var cancel = '<i class="material-icons clickable" style="padding-right:10px; font-size: 18px" onclick="' + onclick + '">remove_circle</i>';
    var stop = $('<input id="origin-input" name="origin" class="stop-input controls"' +
           'type="text" placeholder="Enter a stop..." onPaste=""' +
           'onkeydown="if (event.keyCode == 13) { return false;}"' +
           ' style="margin-left: 0px !important; padding-left: 0px !important">');

    div.attr('id', id);

    div.append(cancel);
    div.append(stop);

    stops.append(div);
    stopLocations[count] = div;

    var autocomplete = new google.maps.places.Autocomplete(stop[0], {placeIdOnly: true});
    var c = count;
    mapHandler.setupPlaceChangedListener(autocomplete, function() {
      stopChanged(c);
    });

    stop.focus();
    count++;
  }

  function removeStop(i) {
    stopLocations[i].remove();
    delete stopLocations[i];
    sendStopsToServer();
    mapHandler.drawMap();
  }

  function stopChanged(i) {
    var stopDiv = $('#stop' + i);

    var div = $('<div></div>');
    var onclick = "removeStop(" + i + ")";
    var newLocation = stopDiv.find('input').val();

    <% if (isDriver && view != "rider") { %>
      var cancel = '<i class="material-icons clickable" style="padding-right:10px; font-size:18px" onclick="' + onclick + '">remove_circle</i>';
      var stop = $('<span style="font-size:18px" class="editableInput">' + newLocation + '</span>');
    <% } else {%>
      var cancel = '<i class="material-icons" style="padding-right:10px; font-size:18px">remove_circle</i>';
      var stop = $('<span style="font-size:18px">' + newLocation + '</span>');
    <% } %>

    div.attr('id', 'stop' + i);

    div.append(cancel);
    div.append(stop);

    stopLocations[i] = div;
    stopDiv.replaceWith(div);
    sendStopsToServer();

    mapHandler.drawMap();
  }

  function sendStopsToServer() {
    var stopList = [];
    for (key in stopLocations) {
      stopList.push(stopLocations[key].find('span').html());
    }

    var data = {
      routeId: routeData._id,
      stops: stopList,
      updating: "stops[]"
    }

    $.post("/route/update", data, function(data, result) {

    });
  }

  setUpStops();
  setUpTable();
  setUpEditability();
  setUpTextInfo();
  checkSeatsLeft();
  updateClock();

  <% if (isRider && !confirmedRider) { %>
    $('#cancelRequestButton').show();
  <% } %>

  modals = [];
  <% if (isDriver && !user.paymentSetup && routeData.requireInitialDeposit && view != "rider") { %>
    modals.push(showsetUpPaymentModal);
  <% } %>
  <% if (!opened && isDriver && view != "rider") { %>
    modals.push(showFBModal);
  <% } %>
  <% if (paymentConfirmed) { %>
    modals.push(showPaymentConfirmed);
  <% } %>


  function showAvaliableModals() {
    if (modals.length > 0) {
      modals[0].call();
      modals.splice(0, 1);
    }
  }

  showAvaliableModals();

</script>
