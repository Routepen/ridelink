<script type="text/javascript">

  var mapHandler;

  function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: 34.4140, lng: -119.8489},
          zoom: 13
      });

      mapHandler = new showRoute(map);
  }


  var markers = {};

  function showRoute(map) {
    this.map = map;
    this.originPlaceId = null;
    this.destinationPlaceId = null;
    this.travelMode = 'DRIVING';
    this.directionsService = new google.maps.DirectionsService;
    this.directionsDisplay = new google.maps.DirectionsRenderer;
    this.directionsDisplay.setMap(map);
    this.geocoder = new google.maps.Geocoder();

    var me = this;
    this.drawMap(function() {
      me.setUpDropOff(map);
      me.dropInitialPins(map);
    });

  }

  showRoute.prototype.drawMap = function(callback) {
    var waypoints = [];
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      waypoints.push({
        location: routeData.dropOffs[routeData.confirmedRiders[i]._id],
        stopover: true,
      });
    }

    console.log(waypoints);

    me = this;

    console.log("routing from", routeData.origin, "to", routeData.destination);
    this.directionsService.route({
      origin: routeData.origin,
      destination:  routeData.destination,
      travelMode: this.travelMode,
      waypoints: waypoints,
      optimizeWaypoints: true
    }, function(response, status) {
      if (status === 'OK') {
        console.log(response.routes[0].warnings);
        me.directionsDisplay.setDirections(response);
        if (callback) callback();
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
  }

  showRoute.prototype.dropInitialPins = function(map) {

    var contentString;
    var me = this;

    var allRiders = [];
    for (var i = 0; i < routeData.riders.length; i++) {
      var rider = routeData.riders[i];
      rider.confirmed = false;
      allRiders.push(rider);
    }
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      var rider = routeData.confirmedRiders[i];
      rider.confirmed = true;
      allRiders.push(rider);
    }

    for (var i = 0; i < allRiders.length; i++) {
      var rider = allRiders[i];
      this.geocoder.geocode( { 'address': routeData.dropOffs[rider._id] }, function(results, status) {
        contentString = "<div>" + rider.facebook.name + "</div>";

        <% if (user && routeData.driver._id.toString() == user._id.toString()) { %>
          if (!rider.confirmed) {
            contentString += '<button onclick="javascript:me.confirmRider(\'' + rider._id + '\')">Confirm</button>'
          }
        <% } %>


        var infowindow = new google.maps.InfoWindow({
          content: contentString
        });

        var riderId = rider._id;

        markers[riderId] = markers[riderId] || new google.maps.Marker({
          map: map,
          position: results[0].geometry.location,
          title: rider.facebook.name
        });

        markers[riderId].addListener('click', function() {
          hightlightInTable(rider._id);
          infowindow.open(map, markers[riderId]);
        });

      });
    }
  }

  showRoute.prototype.setUpDropOff = function(map) {
    this.dropOffInput = document.getElementById("pac-input");
    var dropOffInput;
    if (this.dropOffInput) {
      dropOffAutocomplete = new google.maps.places.Autocomplete(
            this.dropOffInput, {placeIdOnly: true});

      this.setupPlaceChangedListener(dropOffAutocomplete, function() {
        <% if (user) { %>
          var place = dropOffAutocomplete.getPlace();
          if (!place.place_id) {
              window.alert("Please select an option from the dropdown list.");
              return;
          }
          geocoder.geocode( { 'address': place.name }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
              markers["<%= user._id %>"] = markers["<%= user._id %>"] || new google.maps.Marker({
                  map: map,
                  draggable: true,
                  position: results[0].geometry.location
              });

              markers["<%= user._id %>"].setPosition(results[0].geometry.location);

              var text = $('#dropOffText'), editable = $('#dropOffTextEditable');
              text.show();
              editable.hide();
              var address = editable.find('input').val();
              text.find('span').html(address);

              data = {
                routeId: "<%= routeData._id %>",
                address: address
              };

              console.log("posting");
              $.post("/route/addrider", data, function(data, text) {
                console.log(data, text);
              });

            } else {
              alert("Couln't map to " + place.name + " because " + status);
            }
          });
        <% } else { %>
          window.location.replace("/auth/facebook?redirect=" + encodeURIComponent(window.location.href));
        <% } %>
      });
    }

    pickUpInput = document.getElementById("editOriginInput");
    if (pickUpInput) {
      var pickUpInputAutocomplete = new google.maps.places.Autocomplete(
              pickUpInput, {placeIdOnly: true});
    }

    destinationInput = document.getElementById("editDestinationInput");
    if (destinationInput) {
      var destinationInput = new google.maps.places.Autocomplete(
              destinationInput, {placeIdOnly: true});
    }

    var geocoder = this.geocoder;
    var me = this;
  }

  showRoute.prototype.setupPlaceChangedListener = function(autocomplete, onChanged) {

    autocomplete.bindTo('bounds', this.map);
    autocomplete.addListener('place_changed', onChanged);

  };

  function confirmRider(id) {
    console.log(id);

    var post = {
      userId: id,
      routeId: routeData._id
    };

    $.post("/route/confirmrider", post, function(data, textStatus) {
      for (var i = 0; i < routeData.riders.length; i++) {
        var rider = routeData.riders[i];
        if (rider._id == id) {
          routeData.riders.splice(i, 1);
          routeData.confirmedRiders.push(rider);
        }
        $("#seatsText>span").html(routeData.seats - routeData.confirmedRiders.length);
      }
      setUpTable();
      mapHandler.drawMap();
    });
  }

  function setUpEditability() {
    <% if (isDriver) { %>
      $('#originText').click(function() {
        $('#originText').hide();
        $('#originTextEditable').show();
        var input = $('#originTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $('#destinationText').click(function() {
        $('#destinationText').hide();
        $('#destinationTextEditable').show();
        var input = $('#destinationTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $('#seatsText').click(function() {
        $('#seatsText').hide();
        $('#seatsTextEditable').show();
        var input = $('#seatsTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });

      $('#dateText').click(function() {
        $('#dateText').hide();
        $('#dateTextEditable').show();
        var input = $('#dateTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });
    <% } else { %>

      <% if (isRider) { %>
        $("#dropOffText").show();
      <% } else { %>
        $("#dropOffTextEditable").show();
      <% } %>

    <% } %>

    <% if (!confirmedRider) { %>
      $('#dropOffText').click(function() {
        $('#dropOffText').hide();
        $('#dropOffTextEditable').show();
        var input = $('#dropOffTextEditable').find('input');
        input.focus();
        input[0].selectionStart = input[0].selectionEnd = input.val().length;
      });
    <% } %>
  }

  function editableDone(submit, id) {
    selector = "#" + id;
    var textDiv = $(selector + 'Text');
    var editableDiv = $(selector + 'TextEditable');
    textDiv.show();
    editableDiv.hide();

    var span = textDiv.find('span'), input = editableDiv.find('input');
    if (submit && span.html() != input.val()) {
      if (id == "seats") {
        span.html(input.val() - (routeData.confirmedRiders.length + routeData.riders.length));
      }
      else {
        span.html(input.val());
      }
      routeData[id] = input.val();
      mapHandler.drawMap();

      data = {
        routeId: routeData._id,
        updating: id
      };

      data[id] = input.val();

      $.post("/route/update", data, function() {

      });
    }
    else {
      input.val(span.html());
    }
  }

  var routeData = <%- routeDataString %>;

  function setUpTable() {
    var table = document.getElementById("tableDiv");
    if (routeData.confirmedRiders.length + routeData.riders.length == 0) {
      $(table).hide();
    }
    var tbody = document.getElementById("riderTable");
    tbody.innerHTML = "";
    for (var i = 0; i < routeData.confirmedRiders.length; i++) {
      tbody.innerHTML += '<tr id="rider' + routeData.confirmedRiders[i]._id + '">' +
          "<td> " + (i+1) + " </td>" +
          "<td> " + routeData.confirmedRiders[i].facebook.name + "</td>" +
          "<td> $" + routeData.inconvenience[0].toFixed(2) + " </td>" +
          '<td> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span></td>' +
          "</tr>";
    }


    for (var i = 0; i < routeData.riders.length; i++) {
      var onclick = "javascript:confirmRider('" + routeData.riders[i]._id + "')";

      tbody.innerHTML += '<tr id="rider' + routeData.riders[i]._id + '">' +
          '<td>' + (i+1) + '</td>' +
          '<td>' + routeData.riders[i].facebook.name + '</td>' +
          "<td> $" + routeData.inconvenience[0].toFixed(2) + " </td>" +
          '<td>' +
          <% if (isDriver) { %>
            '  <button onclick="' + onclick + '" type="button" class="btn btn-success btn-xs">Confirm</button>' +
          <% } %>
          '</td>' +
        '</tr>';
    }
  }

  function hightlightInTable(riderId) {
    $("#riderTable").find("tr").each(function(i, elem) {
      if (elem.id == "rider" + riderId) {
        $(elem).addClass("highlighted");
        console.log("ading");
      }
      else {
        $(elem).removeClass("highlighted");
        console.log("removing");
      }
    });
  }

  setUpTable();
  setUpEditability();

</script>
