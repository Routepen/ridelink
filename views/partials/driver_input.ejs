<div class="modal fade" id="emailModal" tabindex="-1" role="dialog" aria-labelledby="emailModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                            aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Confirm your email</h4>
            </div>
            <form action="javascript:confirmEmail()">
                <div class="modal-body">
                    Send me notifications at
                    <input id="email-input" type="email" class="form-control" id="emailInput" value="<%= user.confirmedEmail || user.facebook.email %>"
                           placeholder="Email">
                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" value="Save">
                </div>
            </form>
        </div>
    </div>
</div>

<div class="col-md-4 core-container">
    <div style="padding-left:10px;">
        <div id="header-color-box" class="color-box">
            <h3 class="color-header">
                Create a Route
            </h3>
        </div>

        <div id="driver_input_container" class="row">
            <div id="form-color-box" class="color-box">
                <div>
                    <i class="material-icons" style="padding-left:10px ">adjust</i>
                    <input id="origin-input" name="origin" class="controls" type="text"
                           placeholder="Enter an origin location..."
                           value="UCSB, Santa Barbara, CA, United States">
                </div>
                <div id="stops"></div>
                <button class="btn" style="width:200px; margin-left: 46px; background-color: white; color: #0c84e4" onclick="addStop(); return false;">
                  Add Stop
                </button>
                <div>
                    <i class="material-icons" style="padding-left:10px">place</i>
                    <input autofocus id="destination-input" name="destination" class="controls" type="text"
                           placeholder="Enter a destination location...">
                </div>
            </div>
            <!--<input id="destination" type="text" name = 'destination' class="form-control" placeholder="Destination"> -->
            <!--  <a class="btn btn-lg btn-success" type="submit" value="Submit" href="#" role="button">Route</a> -->


            <hr>
            <div>
                <div class="col-md-12">
                    <input id="num-seats" name="seats" class="controls" type="text"
                           placeholder="Enter number of seats..."><br>
                    <input id="charge" name="charge" class="controls" type="text" placeholder="$ Cost per seat" onPaste=""><br>
                    <br>
                    <!--<input id="requireInitialDeposit" name="requireInitialDeposit" type="checkbox" checked> Require
                    Initial Deposit <br>
                    <div font-size="8px" id="initialDepositNotes">
                      Initial deposits requires a 3 dollar additional charge for each rider
                      <br>
                      <a target="_blank" href="/html/faq/initialDeposit.html">What is this?</a>
                    </div>
                    <br>-->
                    <input id="date" name="date" class="controls" type="text" placeholder="Date..." onPaste="">

                    <br>
                    <input id="time" name="time" class="controls" type="text" placeholder="Time..." onPaste=""
                           onkeydown="if (event.keyCode == 13) { submitForm(); return false; }">

                    <br><br>
                    <input type="submit" id="create-route-button" class="btn btn-md btn-success" value="Create Route">
                </div>
            </div>


            <input type="hidden" name="confirmedEmail" id="confirmed_email_input">
        </div>

        <br>

    </div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBeWLtoD-PTsiqaI1QuPR5y1Vas2P3QStA&libraries=places&callback=initMap"
        async defer></script>

<script type="text/javascript">

    var mapInputsCorrect = false;

    var mapHandler;
    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            mapTypeControl: false,
            center: {lat: 34.4140, lng: -119.8489},
            zoom: 13
        });

        mapHandler = new AutocompleteDirectionsHandler(map);
    }

    function AutocompleteDirectionsHandler(map) {
        this.map = map;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'DRIVING';
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
                originInput, {placeIdOnly: true});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
                destinationInput, {placeIdOnly: true});


        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

        /*this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
    */
    }


    AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            if (!place.place_id) {
                window.alert("Please select an option from the dropdown list.");
                return;
            }
            if (mode === 'ORIG') {
                me.originPlaceId = place.place_id;
            } else if (mode == "DEST"){
                me.destinationPlaceId = place.place_id;
            }
            me.route();
        });

    };

    AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.destinationPlaceId) {
            return;
        }

        var me = this;
        var origin;
        if (!this.originPlaceId) {
          origin = $('#origin-input').val();
        }
        else {
          origin = {'placeId': this.originPlaceId};
        }

        var waypoints = [];
        for (key in stopAutoCompletes) {
          var place = stopAutoCompletes[key].getPlace();
          if (!place) {
            alert("Couldn't find " + $('#stop' + key + ">input").val());
            return;
          }
          waypoints.push({
            location: stopAutoCompletes[key].getPlace().name,
            stopover: true,
          });
        }

        this.directionsService.route({
            origin: origin,
            destination: {'placeId': this.destinationPlaceId},
            travelMode: this.travelMode,
            waypoints: waypoints,
            optimizeWaypoints: true
        }, function(response, status) {
            if (status === 'OK') {
                mapInputsCorrect = true;
                me.directionsDisplay.setDirections(response);
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    };


    $(function () {
        $("#date").datepicker();
    });
    $("#time").timepicker({
        template: false,
        showInputs: false,
        minuteStep: 5,
        defaultTime: "8:00 AM"
    });


    function confirmEmail() {
        var email = document.getElementById("confirmed_email_input");
        var emailInput = document.getElementById("email-input");
        email.value = emailInput.value;
        post();
    }

    $('#create-route-button').click(submitForm);

    function submitForm() {
        if (validateFields()) return;

        $("#emailModal").modal('show');
        setTimeout(function() {
          $("#email-input").focus();
          $("#email-input").select();
        }, 500);

    }

    function getErrorMessage() {
      if (!mapInputsCorrect) { return "Please enter a valid origin and a valid destination"; }

      var seats = document.getElementById("num-seats").value.replace(/\s+/, "");
      var charge = document.getElementById("charge").value.replace(/\s+/, "");
      var date = document.getElementById("date").value;
      //var time = document.getElementById("time").value;

      if (seats.search(/^\d+$/) < 0) { return "Please enter a number for the number of people you can take"; }
      if (charge.search(/^\$?(?:\d*\.\d{0,2}|\d+)$/) < 0) { return "Please enter a number for the price per seat"; }
      if (date.split('/').length != 3) { return "Please enter a valid date"; }
      //if (time == "") { return "Please enter the time you are leaving"; }

      return "";
    }

    function validateFields() {
        errorMessage = getErrorMessage();
        if (errorMessage != "") {
            $('#errorMessage').html(errorMessage);
            $('#alertbox').show();
            return true;
        }

        $('#alertbox').hide();
        return false;
    }

    var posted = false;
    function post() {
        if (validateFields()) return;

      if (posted) return;
      posted = true;
      $('#create-route').button('loading');

      var seats = document.getElementById("num-seats");
      var charge = document.getElementById("charge");
      var requireInitialDeposit = document.getElementById("requireInitialDeposit");
      var date = document.getElementById("date");
      var time = document.getElementById("time");
      var email = document.getElementById("confirmed_email_input");
      var origin = document.getElementById("origin-input");
      var destination = document.getElementById("destination-input");
      var stops = $("#stops");

      var children = stops.children();
      var waypoints = [];
      for (var i = 0; i < children.length; i++) {
          waypoints.push($(children[i]).find('input').val());
      }

        /*
        var test1 = $("#origin-input").geocomplete();
        var test2 = $("#destination-input").geocomplete();
        console.log(test1, test2);

        */

      var data = {
          seats: seats.value,
          charge: charge.value.replace('$', ''),
          //requireInitialDeposit: requireInitialDeposit.checked,
          date: date.value,
          time: time.value,
          origin: origin.value,
          destination: destination.value,
          stops: waypoints,
      };

      var confirmedEmail = email.value;
      if (confirmedEmail) {
        data.confirmedEmail = confirmedEmail;
      }

      $.post('/route/new/', data, function(data, status){
        console.log(data, status);
        if (status == "success") {
          window.location.href = data;
        }
        else {
          posted = false;
          $('#create-route').button('reset');
        }
      })
      .error(function() { alert("Request failed. Try again later"); });
    }

    var stopAutoCompletes = {};
    function removeStop(num) {
      $('#stop' + num).remove();
      delete stopAutoCompletes[num];

      mapHandler.route();
    }

    var count = 0;
    function addStop() {
      var stops = $('#stops');
      var id = "stop" + count;
      var onclick = "removeStop(" + count + ")";

      var div = $('<div></div>');
      var cancel = '<i class="material-icons clickable" style="padding-left:10px" onclick="' + onclick + '">remove_circle</i>';
      var stop = $('<input id="origin-input" name="origin" class="stop-input controls"' +
             'type="text" placeholder="Enter a stop..." onPaste=""' +
             'onkeydown="if (event.keyCode == 13) { return false;}"' +
             ' style="margin-left: 12px; padding-left: 12px">');

      div.attr('id', id);

      div.append(cancel);
      div.append(stop);

      stops.append(div);

      stopAutoCompletes[count] = new google.maps.places.Autocomplete(stop[0], {placeIdOnly: true});
      mapHandler.setupPlaceChangedListener(stopAutoCompletes[count]);

      stop.focus();
      count++;

    }

</script>
