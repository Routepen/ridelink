<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:300' rel='stylesheet' type='text/css'>
    <link rel="icon" href="../../favicon.ico">

    <title>Simple Map</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.css" rel="stylesheet">

    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <link href="../../assets/css/ie10-viewport-bug-workaround.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">

    <!-- Just for debugging purposes. Don't actually copy these 2 lines! -->
    <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <script src="../../assets/js/ie-emulation-modes-warning.js"></script>

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
            height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
<script>
    /*
    function checkLoginState() {
        FB.getLoginStatus(function (response) {
            statusChangeCallback(response);
        });
    }
    window.fbAsyncInit = function() {
        FB.init({
            appId      : '1122786494515943',
            cookie     : true,
            xfbml      : true,
            version    : 'v2.8'
        });
        FB.AppEvents.logPageView();
    };

    (function(d, s, id){
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement(s); js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
*/
</script>


<nav class="navbar navbar-default navbar-static-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">EasyDrive</a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
            <!--<ul class="nav navbar-nav">
                <li><a href="#">About</a></li>
            </ul> -->
            <ul class="nav navbar-nav navbar-right">
                <li>
                    <a href="/auth/facebook" data-size="xlarge" class="btn btn-primary"><span class="fa fa-facebook"></span> Facebook</a>
                </li>
            </ul>
        </div><!--/.nav-collapse -->
    </div>
</nav>

<div class = "row">
    <a href="#" class="btn btn-primary btn-lg">
        <span class="glyphicon glyphicon-plus" id="newride"></span> Create a new route!
    </a>
</div>

<div>
    <span class="glyphicon glyphicon-paperclip"> Share your route: </span> https://maps.com/127
</div>
<h4> Where are you driving? </h4>
<div class="container-fluid row">
    <table class="table table-striped table-hover ">
        <thead>
            <tr>
                <th>#</th>
                <th> Rider </th>
                <th> Inconvenience cost </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td> 1 </td>
                <td> Victor Cheng </td>
                <td> $4.35 </td>
            </tr>
        </tbody>
    </table>
</div>

<br> <br>
<div id="pac-card" class="jumbatron">
    <div id="title" class="row">
        Share your route
    </div>
    <div class="col-md-6">
        <form class="row" action="/addroute/">
            <div class = "col-md-3">
                <input id="origin" type="text" name='origin' class="form-control" placeholder="Origin">
            </div>
            <div class = "col-md-3">
                <input id="destination" type="text" name = 'destination' class="form-control" placeholder="Destination">
            </div>
            <a class="btn btn-lg btn-success" type="submit" value="Submit" href="#" role="button">Route</a>
        </form>
    </div>
</div>
<div id="map"></div>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBeWLtoD-PTsiqaI1QuPR5y1Vas2P3QStA&callback=initMap&libraries=places"  async defer>
</script>
<script>
    function initMap() {
        var inputorigin = document.getElementById('origin');
        var inputdestination = document.getElementById('destination');
        var autocomplete = new google.maps.places.Autocomplete(inputorigin);
        var autocomplete2 = new google.maps.places.Autocomplete(inputdestination);
        var card = document.getElementById('pac-card');


        var pointA = "47520 Avalon Heights Terrace",
                pointB= "UCSD"

/*
         var pointA = new google.maps.LatLng(34.41159, -119.8442),
         pointB = new google.maps.LatLng(37.5483, -121.9886),
*/
        myOptions = {
            //zoom: 7,
            center: pointA
        },
                map = new google.maps.Map(document.getElementById('map'), myOptions),
                // Instantiate a directions service.
                directionsService = new google.maps.DirectionsService,
                directionsDisplay = new google.maps.DirectionsRenderer({
                    map: map
                }),
                markerA = new google.maps.Marker({
                    position: pointA,
                    title: "point A",
                    label: "A",
                    map: map
                }),
                markerB = new google.maps.Marker({
                    position: pointB,
                    title: "point B",
                    label: "B",
                    map: map
                });
        // get route from A to B
        calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB);


        //Autocomplete on Origin and Destination

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

        autocomplete.addListener('place_changed', function() {
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }
        });

        autocomplete2.addListener('place_changed', function() {
            marker.setVisible(false);
            var place = autocomplete2.getPlace();
            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }
//            marker.setVisible(true);
        });

        //Directions and Map display

    }

    function calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB) {
        directionsService.route({
            origin: pointA,
            destination: pointB,
            avoidTolls: true,
            avoidHighways: false,
            travelMode: google.maps.TravelMode.DRIVING
        }, function (response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

    initMap();
</script>


</body>
</html>