{"version":3,"sources":["googlemaps.js"],"names":[],"mappings":"AAAA;;;AAGA,IAAI,gBAAgB,QAAQ,YAAR,CAApB;AACA,IAAI,WAAW,QAAQ,kBAAR,CAAf;AACA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,aAAa,QAAQ,aAAR,CAAjB;;AAEA,IAAI,OAAO,0BAAX;AACA,IAAI,MAAM,EAAC,SAAU,MAAX,EAAV;;AAEA,WAAW,MAAX,CAAkB,IAAlB,EAAwB,GAAxB;;AAEA,IAAI,eAAe;AACf,SAAK,yCADU;AAEf;AACA,kBAAoB,IAHL,EAGW;AAC1B,sBAAoB,KAJL;AAKf,YAAoB,IALL,EAAnB;AAOA,IAAI,QAAQ,IAAI,aAAJ,CAAkB,YAAlB,CAAZ;;AAEA,IAAI,gBAAgB;AAChB,eAAc;AADE,CAApB;;AAIA,MAAM,OAAN,CAAc,aAAd,EAA6B,UAAS,GAAT,EAAc,MAAd,EAAqB;AAC9C,YAAQ,GAAR,CAAY,OAAO,OAAP,CAAe,CAAf,EAAkB,QAAlB,CAA2B,QAAvC;AACH,CAFD;;AAIA,IAAI,UAAU;AACV,YAAQ,MADE;AAEV,iBAAa,eAFH;AAGV,gBAAY;AAHF,CAAd;;AAMA,IAAI,YAAY,SAAhB;AAAA,IAA2B,WAAW,CAAC,UAAvC;AAAA,IACE,YAAY,SADd;AAAA,IACyB,WAAW,CAAC,UADrC;;AAGA,IAAI,SAAS,CAAb;AAAA,IAAgB,SAAS,CAAzB;AAAA,IAA4B,MAAM,IAAlC,C,CAAuC;AACvC;AACA,KAAK,IAAI,MAAM,QAAf,EAAyB,MAAM,QAA/B,EAAyC,OAAO,GAAhD,EAAqD;AACnD;AACA,aAAS,CAAT;AACA,SAAK,IAAI,MAAM,SAAf,EAA0B,MAAM,SAAhC,EAA2C,OAAO,GAAlD,EAAuD;AACrD;AACD;AACF;AACD,QAAQ,GAAR,CAAY,MAAZ,EAAoB,MAApB;;AAEA,IAAI,eAAe,IAAI,KAAJ,CAAU,SAAO,MAAjB,CAAnB;;AAGA,MAAM,UAAN,CAAiB,OAAjB,EAA0B,UAAS,GAAT,EAAc,MAAd,EAAqB;AAC3C,QAAI,SAAS,SAAS,MAAT,CAAgB,OAAO,MAAP,CAAc,CAAd,EAAiB,iBAAjB,CAAmC,MAAnD,CAAb;AACA,WAAO,OAAP,CAAe,CAAC,CAAD,EAAI,CAAJ,KAAU;AACvB,YAAI,IAAI,SAAS,CAAC,EAAE,CAAF,IAAO,SAAR,IAAmB,GAA5B,CAAR;AAAA,YAA0C,IAAI,SAAS,CAAC,EAAE,CAAF,IAAO,QAAR,IAAkB,GAA3B,CAA9C;AACA,gBAAQ,GAAR,CAAY,CAAZ,EAAe,CAAf;AACA,YAAI,QAAQ,IAAI,IAAE,MAAlB;;AAEA,YAAI,QAAQ,aAAa,KAAb,KAAuB,CAAnC;AACA,iBAAS,IAAI,OAAO,MAApB;AACA,qBAAa,KAAb,IAAsB,KAAtB;AAED,KATD;AAUH,CAZD","file":"googlemaps-compiled.js","sourcesContent":["/**\r\n * Created by Victor on 1/23/2017.\r\n */\r\nvar GoogleMapsAPI = require('googlemaps');\r\nvar polyline = require('@mapbox/polyline');\r\nvar jsonfile = require('jsonfile');\r\nvar jsonUpdate = require('json-update');\r\n\r\nvar file = './geolocation_cache.json';\r\nvar obj = {\"hello\" : \"test\"};\r\n\r\njsonUpdate.update(file, obj);\r\n\r\nvar publicConfig = {\r\n    key: 'AIzaSyBeWLtoD-PTsiqaI1QuPR5y1Vas2P3QStA',\r\n    //key: process.env.GOOGLE_MAPS_KEY,\r\n    stagger_time:       1000, // for elevationPath\r\n    encode_polylines:   false,\r\n    secure:             true, // use https\r\n};\r\nvar gmAPI = new GoogleMapsAPI(publicConfig);\r\n\r\nvar geocodeParams = {\r\n    \"address\":    \"UCSB\",\r\n};\r\n\r\ngmAPI.geocode(geocodeParams, function(err, result){\r\n    console.log(result.results[0].geometry.location);\r\n});\r\n\r\nvar request = {\r\n    origin: 'UCSB',\r\n    destination: 'San Francisco',\r\n    travelMode: 'DRIVING'\r\n};\r\n\r\nvar northMost = 41.998373, westMost = -124.415248,\r\n  southMost = 32.534277, eastMost = -114.140199;\r\n\r\nvar count1 = 0, count2 = 0, inc = .416;// .416 degrees of lat/lng is about 25 miles\r\n// inc can be adjusted as needed\r\nfor (var lng = westMost; lng < eastMost; lng += inc) {\r\n  count1++;\r\n  count2 = 0;\r\n  for (var lat = northMost; lat > southMost; lat -= inc) {\r\n    count2++;\r\n  }\r\n}\r\nconsole.log(count1, count2);\r\n\r\nvar compartments = new Array(count1*count2);\r\n\r\n\r\ngmAPI.directions(request, function(err, result){\r\n    var points = polyline.decode(result.routes[0].overview_polyline.points);\r\n    points.forEach((p, i) => {\r\n      var x = parseInt((p[0] - southMost)/inc), y = parseInt((p[1] - westMost)/inc)\r\n      console.log(x, y);\r\n      var index = x + y*count1;\r\n\r\n      var score = compartments[index] || 0;\r\n      score += i / points.length;\r\n      compartments[index] = score;\r\n\r\n    })\r\n});\r\n"]}